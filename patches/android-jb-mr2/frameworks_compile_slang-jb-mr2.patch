diff --git a/slang_rs_reflection_base.cpp b/slang_rs_reflection_base.cpp
index a4a0d35..fad9ae1 100644
--- a/slang_rs_reflection_base.cpp
+++ b/slang_rs_reflection_base.cpp
@@ -109,6 +109,9 @@ void RSReflectionBase::startFile(const string &filename) {
 string RSReflectionBase::stripRS(const string &s) const {
   string tmp(s);
   size_t pos = tmp.rfind(".rs");
+  if (pos == string::npos) {
+    pos = tmp.rfind(".fs");
+  }
   if(pos != string::npos) {
     tmp.erase(pos);
   }
diff --git a/slang_rs_reflection_cpp.cpp b/slang_rs_reflection_cpp.cpp
index 6dfe141..1a2d190 100644
--- a/slang_rs_reflection_cpp.cpp
+++ b/slang_rs_reflection_cpp.cpp
@@ -62,8 +62,12 @@ static const char *GetMatrixTypeName(const RSExportMatrixType *EMT) {
 static std::string GetTypeName(const RSExportType *ET, bool Brackets = true) {
   switch (ET->getClass()) {
     case RSExportType::ExportClassPrimitive: {
-      return RSExportPrimitiveType::getRSReflectionType(
-          static_cast<const RSExportPrimitiveType*>(ET))->c_name;
+      if (((RSExportPrimitiveType*)ET)->getType() ==
+             RSExportPrimitiveType::DataTypeRSAllocation)
+        return "android::sp<const android::RSC::Allocation>";
+      else
+        return RSExportPrimitiveType::getRSReflectionType(
+            static_cast<const RSExportPrimitiveType*>(ET))->c_name;
     }
     case RSExportType::ExportClassPointer: {
       const RSExportType *PointeeType =
@@ -453,16 +457,27 @@ void RSReflectionCpp::genPrimitiveTypeExportVariable(const RSExportVar *EV) {
   RSReflectionTypeData rtd;
   EV->getType()->convertToRTD(&rtd);
 
+  std::string TypeName;
+  std::string SetVarParam;
+
+  if (((RSExportPrimitiveType*)EV->getType())->getType() ==
+         RSExportPrimitiveType::DataTypeRSAllocation) {
+    TypeName = "android::sp<const android::RSC::Allocation>";
+    SetVarParam = ", v);";
+  } else {
+    TypeName = rtd.type->c_name;
+    SetVarParam = ", &v, sizeof(v));";
+  }
+
   if (!EV->isConst()) {
-    write(string("void set_") + EV->getName() + "(" + rtd.type->c_name +
-          " v) {");
+    write(string("void set_") + EV->getName() + "(" + TypeName + " v) {");
     stringstream tmp;
     tmp << getNextExportVarSlot();
-    write(string("    setVar(") + tmp.str() + ", &v, sizeof(v));");
+    write(string("    setVar(") + tmp.str() + SetVarParam);
     write(string("    __") + EV->getName() + " = v;");
     write("}");
   }
-  write(string(rtd.type->c_name) + " get_" + EV->getName() + "() const {");
+  write(TypeName + " get_" + EV->getName() + "() const {");
   if (EV->isConst()) {
     const clang::APValue &val = EV->getInit();
     bool isBool = !strcmp(rtd.type->c_name, "bool");
