CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(HIPACC)
OPTION(USE_POLLY "Use Polly for analysis" OFF)
INCLUDE(CMakeDependentOption)
CMAKE_DEPENDENT_OPTION(USE_JIT_ESTIMATE "Compile kernels JIT to estimate resource usage" ON "NOT APPLE" OFF)

#SET(CMAKE_VERBOSE_MAKEFILE on)

SET(HIPACC_MAJOR_VERSION 0)
SET(HIPACC_MINOR_VERSION 5)
SET(HIPACC_PATCH_VERSION 2)
SET(HIPACC_VERSION ${HIPACC_MAJOR_VERSION}.${HIPACC_MINOR_VERSION}.${HIPACC_PATCH_VERSION})
SET(HIPACC_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(HIPACC_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})


# get repository and revision
EXECUTE_PROCESS(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/cmake/scripts/get_repository_path.sh
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    TIMEOUT 5
    RESULT_VARIABLE git_result
    OUTPUT_VARIABLE HIPACC_GIT_REPOSITORY)
STRING(STRIP ${HIPACC_GIT_REPOSITORY} HIPACC_GIT_REPOSITORY)

EXECUTE_PROCESS(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/cmake/scripts/get_source_version.sh
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    TIMEOUT 5
    RESULT_VARIABLE git_result
    OUTPUT_VARIABLE HIPACC_GIT_VERSION)
STRING(STRIP ${HIPACC_GIT_VERSION} HIPACC_GIT_VERSION)


# add path for custom modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)
FIND_PACKAGE(LLVM REQUIRED)
INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIR})

FIND_PACKAGE(CUDA)
FIND_PACKAGE(OpenCL)
FIND_PACKAGE(RenderScript)

IF(NOT CUDA_FOUND AND NOT OPENCL_FOUND AND NOT RENDERSCRIPT_FOUND)
    MESSAGE(FATAL_ERROR "Neither CUDA, OpenCL nor RenderScript found. At least one of them is required to use HIPACC properly.")
ENDIF(NOT CUDA_FOUND AND NOT OPENCL_FOUND AND NOT RENDERSCRIPT_FOUND)

IF(CUDA_FOUND)
    SET(NVCC_COMPILER "${CUDA_TOOLKIT_ROOT_DIR}/bin/nvcc")
ENDIF(CUDA_FOUND)

IF(OPENCL_FOUND)
    SET(OCL_COMPILER "${CMAKE_INSTALL_PREFIX}/bin/ocl_compile")
ENDIF(OPENCL_FOUND)

MESSAGE(STATUS "Configuration summary:")
MESSAGE(STATUS "===")
MESSAGE(STATUS "USE_POLLY=${USE_POLLY}")
MESSAGE(STATUS "USE_JIT_ESTIMATE=${USE_JIT_ESTIMATE}")
MESSAGE(STATUS "===")


# platform specific fixes
IF(APPLE)
    IF("${DARWIN_MAJOR_VERSION}" LESS 11)
        SET(PLATFORM_FIXES "-U __STRICT_ANSI__ -D NO_BOOST")
    ELSE("${DARWIN_MAJOR_VERSION}" LESS 11)
        SET(PLATFORM_FIXES "-D NO_BOOST")
    ENDIF("${DARWIN_MAJOR_VERSION}" LESS 11)
    SET(CUDA_LINK "-Xlinker -framework,CUDA")
ELSE(APPLE)
    SET(PLATFORM_FIXES "-D NO_BOOST")
    SET(CUDA_LINK "-lcuda -lcudart")
ENDIF(APPLE)


# debug and release builds
STRING(TOUPPER "${CMAKE_BUILD_TYPE}" build)
IF(build STREQUAL "RELEASE")
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_RELEASE})
ELSE()
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG})
ENDIF()
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -Wall -Wunused ${LLVM_CXXFLAGS}")
#ADD_DEFINITIONS(-DTEST_DEFINITION)


# set include directory, add src directories
INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_BINARY_DIR}/include)
ADD_SUBDIRECTORY(lib)
ADD_SUBDIRECTORY(compiler)
ADD_SUBDIRECTORY(tools)

SET(RUNTIME_INCLUDES "${CMAKE_INSTALL_PREFIX}/include")
SET(DSL_INCLUDES "${CMAKE_INSTALL_PREFIX}/include/dsl")


# configure a header file to pass some of the CMake settings to the source code
CONFIGURE_FILE(
    "${HIPACC_SOURCE_DIR}/include/hipacc/Config/config.h.cmake"
    "${HIPACC_BINARY_DIR}/include/hipacc/Config/config.h")
CONFIGURE_FILE(
    "${HIPACC_SOURCE_DIR}/tests/Makefile.cmake"
    "${HIPACC_BINARY_DIR}/tests/Makefile")
CONFIGURE_FILE(
    "${HIPACC_SOURCE_DIR}/tests/Makefile_CL.cmake"
    "${HIPACC_BINARY_DIR}/tests/Makefile_CL")
CONFIGURE_FILE(
    "${HIPACC_SOURCE_DIR}/tests/CMakeLists.txt.cmake"
    "${HIPACC_BINARY_DIR}/tests/CMakeLists.txt"
    @ONLY)

INSTALL(DIRECTORY tests
    DESTINATION ${CMAKE_INSTALL_PREFIX}
    PATTERN "*.cmake" EXCLUDE)

INSTALL(DIRECTORY ${HIPACC_BINARY_DIR}/tests/
    DESTINATION ${CMAKE_INSTALL_PREFIX})


# install dsl and runtime header files
FILE(GLOB dsl_headers "${CMAKE_CURRENT_SOURCE_DIR}/dsl/*.hpp")
FILE(GLOB runtime_headers "${CMAKE_CURRENT_SOURCE_DIR}/runtime/*.hpp")
INSTALL(FILES ${runtime_headers} DESTINATION include)
INSTALL(FILES ${dsl_headers} DESTINATION include/dsl)

